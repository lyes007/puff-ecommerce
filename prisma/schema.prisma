generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@map("users")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  category    String
  stock       Int
  lowStockThreshold Int @default(10)
  featured    Boolean     @default(false)
  isActive    Boolean     @default(true)
  views       Int         @default(0)
  sales       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  reviews     Review[]
  variants    ProductVariant[]
  stockLogs   StockLog[]
  gallery     ProductImage[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  isPrimary Boolean @default(false)
  order     Int     @default(0)
  createdAt DateTime @default(now())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  name      String  // e.g., "Color", "Size", "Flavor"
  value     String  // e.g., "Red", "Large", "Mint"
  price     Float?  // Additional price if different from base
  stock     Int     @default(0)
  sku       String? // Stock Keeping Unit
  isActive  Boolean @default(true)
  order     Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model StockLog {
  id        String   @id @default(cuid())
  productId String
  oldStock  Int
  newStock  Int
  reason    String
  userId    String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("stock_logs")
}

model Order {
  id          String      @id @default(cuid())
  userId      String?
  customerName String
  customerEmail String
  customerPhone String
  shippingAddress String
  total       Float
  status      OrderStatus @default(PENDING)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User?       @relation(fields: [userId], references: [id])
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  name      String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Discount {
  id          String    @id @default(cuid())
  code        String    @unique
  name        String
  description String?
  type        DiscountType
  value       Float     // Percentage or fixed amount
  minAmount   Float?    // Minimum cart amount
  maxUses     Int?      // Maximum number of uses
  currentUses Int       @default(0)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("discounts")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
